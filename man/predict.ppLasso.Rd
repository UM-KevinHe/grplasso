% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_pplasso.R
\name{predict.ppLasso}
\alias{predict.ppLasso}
\alias{predict.gr_ppLasso}
\title{Predictions of a ppLasso or gr_ppLasso object}
\usage{
\method{predict}{ppLasso}(
  fit,
  data,
  Z.char,
  prov.char,
  lambda,
  which = 1:length(fit$lambda),
  type = c("link", "response", "class", "vars", "nvars"),
  ...
)

\method{predict}{gr_ppLasso}(
  fit,
  data,
  Z.char,
  prov.char,
  lambda,
  which = 1:length(fit$lambda),
  type = c("link", "response", "class", "vars", "groups", "nvars", "ngroups",
    "beta.norm"),
  ...
)
}
\arguments{
\item{fit}{a \code{ppLasso} or \code{gr_ppLasso}.}

\item{data}{an \code{dataframe} or \code{list} object that contains the variables for prediction.}

\item{Z.char}{names of covariates in \code{data} as vector of character strings.}

\item{prov.char}{name of provider IDs variable in \code{data} as a character string.}

\item{lambda}{values of the regularization parameter lambda at which predictions are requested. For values of lambda not in the sequence of fitted models, linear interpolation is used.}

\item{which}{indices of the penalty parameter lambda at which predictions are required. By default, all indices are returned. If lambda is specified, this will override which.}

\item{type}{type of prediction:
\itemize{
\item \code{link}: linear predictors
\item \code{response}: fitted values (i.e., \code{exp(link)/(1 + exp(link))})
\item \code{class}: the binomial outcome with the largest probability
\item \code{vars}: the indices for the non-zero coefficients
\item \code{nvars}: the number of non-zero coefficients
\item \code{groups}: the indices for the non-zero groups
\item \code{ngroups}: the number of non-zero coefficients
\item \code{beta.norm}: L2 norm of the coefficients in each group
}}

\item{...}{}
}
\description{
Return the model predictions of a \code{ppLasso} or \code{gr_ppLasso} object
}
\examples{
data(BinaryData)
data <- BinaryData$data
Y.char <- BinaryData$Y.char
prov.char <- BinaryData$prov.char
Z.char <- BinaryData$Z.char
fit <- pp.lasso(data, Y.char, Z.char, prov.char)
predict(fit, data, Z.char, prov.char, lambda = fit$lambda, type = "response")[1:10, 1:5]
predict(fit, data, Z.char, prov.char, lambda = 0.001, type = "class")[1:10]
predict(fit, data, Z.char, prov.char, lambda = 0.04, type = "vars")

data(BinaryData)
data <- BinaryData$data
Y.char <- BinaryData$Y.char
prov.char <- BinaryData$prov.char
Z.char <- BinaryData$Z.char
group <- BinaryData$group
fit <- grp.lasso(data, Y.char, Z.char, prov.char, group = group)
predict(fit, data, Z.char, prov.char, lambda = fit$lambda, type = "response")[1:10, 1:5]
predict(fit, data, Z.char, prov.char, lambda = 0.001, type = "class")[1:10]
predict(fit, data, Z.char, prov.char, lambda = 0.04, type = "vars")
predict(fit, data, Z.char, prov.char, lambda = 0.04, type = "groups")
}
