% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_DiscSurv.R
\name{predict.DiscSurv}
\alias{predict.DiscSurv}
\title{Predictions of a DiscSurv object}
\usage{
\method{predict}{DiscSurv}(
  fit,
  data,
  Event.char,
  Z.char,
  Time.char,
  lambda,
  which = 1:length(fit$lambda),
  type = c("response", "vars", "nvars"),
  return.Array = TRUE,
  which.lambda = "all",
  ...
)
}
\arguments{
\item{fit}{a \code{DiscSurv} object.}

\item{data}{an `dataframe` or `list` object that contains the variables for prediction.}

\item{Event.char}{name of the event indicator in `data` as a character string.}

\item{Z.char}{names of covariates in `data` as vector of character strings.}

\item{Time.char}{name of the observation time in `data` as a character string.}

\item{lambda}{values of the regularization parameter lambda at which predictions are requested. For values of lambda not in the sequence of fitted models, linear interpolation is used.}

\item{which}{indices of the penalty parameter lambda at which predictions are required. By default, all indices are returned. If lambda is specified, this will override which.}

\item{type}{type of prediction: \code{response} provides the fitted value of each person at each time point ;
\code{vars} returns the indices for the non-zero coefficients; \code{nvars} returns the number of non-zero coefficients;}

\item{which.lambda}{determine which lambda values are included in the output of the prediction. By default, its value is set to "all," resulting in a matrix of predicted values for each lambda presented as a list. However, if specific numeric values are provided, only the predicted matrix corresponding to those specified values will be included in the output.}

\item{...}{}
}
\description{
Return the model predictions of a \code{DiscSurv} object
}
\examples{
data(Surv_Data)
data <- Surv_Data$data
Event.char <- Surv_Data$Event.char
Z.char <- Surv_Data$Z.char
Time.char <- Surv_Data$Time.char
fit <- DiscSurv(data, Event.char, Z.char, Time.char)
predict(fit, data, Event.char, Z.char, Time.char, lambda = fit$lambda, type = "response", which.lambda = fit$lambda[1])[1:5,]
predict(fit, data, Event.char, Z.char, Time.char, lambda = 0.01, type = "vars")
}
