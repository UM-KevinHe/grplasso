// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]
#include <Rcpp.h>
#include <iostream>
#include <cmath>
#include <omp.h>
#include <chrono>

using namespace Rcpp;
using namespace std;
using namespace arma;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// SerBIN
List SerBIN(vec& Y, mat& Z, vec& n_prov, vec gamma, vec beta);
RcppExport SEXP _TmpLasso_SerBIN(SEXP YSEXP, SEXP ZSEXP, SEXP n_provSEXP, SEXP gammaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< vec& >::type n_prov(n_provSEXP);
    Rcpp::traits::input_parameter< vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< vec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(SerBIN(Y, Z, n_prov, gamma, beta));
    return rcpp_result_gen;
END_RCPP
}
// Z_max_grLasso
double Z_max_grLasso(mat& x, vec& r, vec& K, vec& m);
RcppExport SEXP _TmpLasso_Z_max_grLasso(SEXP xSEXP, SEXP rSEXP, SEXP KSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< vec& >::type K(KSEXP);
    Rcpp::traits::input_parameter< vec& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_max_grLasso(x, r, K, m));
    return rcpp_result_gen;
END_RCPP
}
// Deviance
double Deviance(vec& Y, vec& p);
RcppExport SEXP _TmpLasso_Deviance(SEXP YSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< vec& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Deviance(Y, p));
    return rcpp_result_gen;
END_RCPP
}
// grp_lasso
List grp_lasso(vec& Y, mat& Z, vec& n_prov, vec& gamma, vec& beta, int K0, vec& K1, vec& lambda_seq, bool lambda_early_stop, double stop_dev_ratio, vec& group_multiplier, int max_iter, double tol, double nullDev, bool backtrack, double bound, int initial_active_group, double nvar_max, double group_max, bool trace_lambda, bool single_intercept, int threads);
RcppExport SEXP _TmpLasso_grp_lasso(SEXP YSEXP, SEXP ZSEXP, SEXP n_provSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP K0SEXP, SEXP K1SEXP, SEXP lambda_seqSEXP, SEXP lambda_early_stopSEXP, SEXP stop_dev_ratioSEXP, SEXP group_multiplierSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP nullDevSEXP, SEXP backtrackSEXP, SEXP boundSEXP, SEXP initial_active_groupSEXP, SEXP nvar_maxSEXP, SEXP group_maxSEXP, SEXP trace_lambdaSEXP, SEXP single_interceptSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< vec& >::type n_prov(n_provSEXP);
    Rcpp::traits::input_parameter< vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< vec& >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< vec& >::type lambda_seq(lambda_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type lambda_early_stop(lambda_early_stopSEXP);
    Rcpp::traits::input_parameter< double >::type stop_dev_ratio(stop_dev_ratioSEXP);
    Rcpp::traits::input_parameter< vec& >::type group_multiplier(group_multiplierSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type nullDev(nullDevSEXP);
    Rcpp::traits::input_parameter< bool >::type backtrack(backtrackSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< int >::type initial_active_group(initial_active_groupSEXP);
    Rcpp::traits::input_parameter< double >::type nvar_max(nvar_maxSEXP);
    Rcpp::traits::input_parameter< double >::type group_max(group_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type trace_lambda(trace_lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type single_intercept(single_interceptSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(grp_lasso(Y, Z, n_prov, gamma, beta, K0, K1, lambda_seq, lambda_early_stop, stop_dev_ratio, group_multiplier, max_iter, tol, nullDev, backtrack, bound, initial_active_group, nvar_max, group_max, trace_lambda, single_intercept, threads));
    return rcpp_result_gen;
END_RCPP
}
// pp_lasso
List pp_lasso(vec& Y, mat& Z, vec& n_prov, vec& gamma, vec& beta, int K0, vec& K1, vec& lambda_seq, bool lambda_early_stop, double stop_dev_ratio, vec& penalized_multiplier, int max_iter, double tol, double nullDev, bool backtrack, bool MM, double bound, int initial_active_var, double nvar_max, bool trace_lambda, bool single_intercept, int threads);
RcppExport SEXP _TmpLasso_pp_lasso(SEXP YSEXP, SEXP ZSEXP, SEXP n_provSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP K0SEXP, SEXP K1SEXP, SEXP lambda_seqSEXP, SEXP lambda_early_stopSEXP, SEXP stop_dev_ratioSEXP, SEXP penalized_multiplierSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP nullDevSEXP, SEXP backtrackSEXP, SEXP MMSEXP, SEXP boundSEXP, SEXP initial_active_varSEXP, SEXP nvar_maxSEXP, SEXP trace_lambdaSEXP, SEXP single_interceptSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< vec& >::type n_prov(n_provSEXP);
    Rcpp::traits::input_parameter< vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< vec& >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< vec& >::type lambda_seq(lambda_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type lambda_early_stop(lambda_early_stopSEXP);
    Rcpp::traits::input_parameter< double >::type stop_dev_ratio(stop_dev_ratioSEXP);
    Rcpp::traits::input_parameter< vec& >::type penalized_multiplier(penalized_multiplierSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type nullDev(nullDevSEXP);
    Rcpp::traits::input_parameter< bool >::type backtrack(backtrackSEXP);
    Rcpp::traits::input_parameter< bool >::type MM(MMSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< int >::type initial_active_var(initial_active_varSEXP);
    Rcpp::traits::input_parameter< double >::type nvar_max(nvar_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type trace_lambda(trace_lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type single_intercept(single_interceptSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(pp_lasso(Y, Z, n_prov, gamma, beta, K0, K1, lambda_seq, lambda_early_stop, stop_dev_ratio, penalized_multiplier, max_iter, tol, nullDev, backtrack, MM, bound, initial_active_var, nvar_max, trace_lambda, single_intercept, threads));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _TmpLasso_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TmpLasso_SerBIN", (DL_FUNC) &_TmpLasso_SerBIN, 5},
    {"_TmpLasso_Z_max_grLasso", (DL_FUNC) &_TmpLasso_Z_max_grLasso, 4},
    {"_TmpLasso_Deviance", (DL_FUNC) &_TmpLasso_Deviance, 2},
    {"_TmpLasso_grp_lasso", (DL_FUNC) &_TmpLasso_grp_lasso, 22},
    {"_TmpLasso_pp_lasso", (DL_FUNC) &_TmpLasso_pp_lasso, 22},
    {"_TmpLasso_rcpp_hello_world", (DL_FUNC) &_TmpLasso_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_TmpLasso(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
