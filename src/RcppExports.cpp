// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Z_max_grLasso
double Z_max_grLasso(arma::mat& x, arma::vec& r, arma::vec& K, arma::vec& m);
RcppExport SEXP _ppLasso_Z_max_grLasso(SEXP xSEXP, SEXP rSEXP, SEXP KSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_max_grLasso(x, r, K, m));
    return rcpp_result_gen;
END_RCPP
}
// Deviance
double Deviance(arma::vec& Y, arma::vec& p);
RcppExport SEXP _ppLasso_Deviance(SEXP YSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Deviance(Y, p));
    return rcpp_result_gen;
END_RCPP
}
// DiscSurv_residuals
arma::vec DiscSurv_residuals(int n_obs, arma::vec& delta_obs, arma::vec& time, arma::vec& alpha, arma::vec& eta);
RcppExport SEXP _ppLasso_DiscSurv_residuals(SEXP n_obsSEXP, SEXP delta_obsSEXP, SEXP timeSEXP, SEXP alphaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_obs(n_obsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type delta_obs(delta_obsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(DiscSurv_residuals(n_obs, delta_obs, time, alpha, eta));
    return rcpp_result_gen;
END_RCPP
}
// predict_linear_predictor
arma::mat predict_linear_predictor(int n_lambda, int n_obs, int expand_n_obs, arma::vec& time, arma::mat& gamma, arma::mat& eta);
RcppExport SEXP _ppLasso_predict_linear_predictor(SEXP n_lambdaSEXP, SEXP n_obsSEXP, SEXP expand_n_obsSEXP, SEXP timeSEXP, SEXP gammaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_lambda(n_lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n_obs(n_obsSEXP);
    Rcpp::traits::input_parameter< int >::type expand_n_obs(expand_n_obsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_linear_predictor(n_lambda, n_obs, expand_n_obs, time, gamma, eta));
    return rcpp_result_gen;
END_RCPP
}
// pp_lasso
List pp_lasso(arma::vec& Y, arma::mat& Z, arma::vec& n_prov, arma::vec& gamma, arma::vec& beta, int K0, arma::vec& K1, arma::vec& lambda_seq, bool lambda_early_stop, double stop_dev_ratio, arma::vec& penalized_multiplier, int max_total_iter, int max_each_iter, double tol, double nullDev, bool backtrack, bool MM, double bound, int initial_active_var, double nvar_max, bool trace_lambda, bool single_intercept, int threads, bool actSet, int actIter, int activeVarNum, bool actSetRemove);
RcppExport SEXP _ppLasso_pp_lasso(SEXP YSEXP, SEXP ZSEXP, SEXP n_provSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP K0SEXP, SEXP K1SEXP, SEXP lambda_seqSEXP, SEXP lambda_early_stopSEXP, SEXP stop_dev_ratioSEXP, SEXP penalized_multiplierSEXP, SEXP max_total_iterSEXP, SEXP max_each_iterSEXP, SEXP tolSEXP, SEXP nullDevSEXP, SEXP backtrackSEXP, SEXP MMSEXP, SEXP boundSEXP, SEXP initial_active_varSEXP, SEXP nvar_maxSEXP, SEXP trace_lambdaSEXP, SEXP single_interceptSEXP, SEXP threadsSEXP, SEXP actSetSEXP, SEXP actIterSEXP, SEXP activeVarNumSEXP, SEXP actSetRemoveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type n_prov(n_provSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda_seq(lambda_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type lambda_early_stop(lambda_early_stopSEXP);
    Rcpp::traits::input_parameter< double >::type stop_dev_ratio(stop_dev_ratioSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type penalized_multiplier(penalized_multiplierSEXP);
    Rcpp::traits::input_parameter< int >::type max_total_iter(max_total_iterSEXP);
    Rcpp::traits::input_parameter< int >::type max_each_iter(max_each_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type nullDev(nullDevSEXP);
    Rcpp::traits::input_parameter< bool >::type backtrack(backtrackSEXP);
    Rcpp::traits::input_parameter< bool >::type MM(MMSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< int >::type initial_active_var(initial_active_varSEXP);
    Rcpp::traits::input_parameter< double >::type nvar_max(nvar_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type trace_lambda(trace_lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type single_intercept(single_interceptSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type actSet(actSetSEXP);
    Rcpp::traits::input_parameter< int >::type actIter(actIterSEXP);
    Rcpp::traits::input_parameter< int >::type activeVarNum(activeVarNumSEXP);
    Rcpp::traits::input_parameter< bool >::type actSetRemove(actSetRemoveSEXP);
    rcpp_result_gen = Rcpp::wrap(pp_lasso(Y, Z, n_prov, gamma, beta, K0, K1, lambda_seq, lambda_early_stop, stop_dev_ratio, penalized_multiplier, max_total_iter, max_each_iter, tol, nullDev, backtrack, MM, bound, initial_active_var, nvar_max, trace_lambda, single_intercept, threads, actSet, actIter, activeVarNum, actSetRemove));
    return rcpp_result_gen;
END_RCPP
}
// grp_lasso
List grp_lasso(arma::vec& Y, arma::mat& Z, arma::vec& n_prov, arma::vec& gamma, arma::vec& beta, int K0, arma::vec& K1, arma::vec& lambda_seq, bool lambda_early_stop, double stop_dev_ratio, arma::vec& group_multiplier, int max_total_iter, int max_each_iter, double tol, double nullDev, bool backtrack, double bound, int initial_active_group, double nvar_max, double group_max, bool trace_lambda, bool single_intercept, int threads, bool actSet, int actIter, int activeGroupNum, bool actSetRemove);
RcppExport SEXP _ppLasso_grp_lasso(SEXP YSEXP, SEXP ZSEXP, SEXP n_provSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP K0SEXP, SEXP K1SEXP, SEXP lambda_seqSEXP, SEXP lambda_early_stopSEXP, SEXP stop_dev_ratioSEXP, SEXP group_multiplierSEXP, SEXP max_total_iterSEXP, SEXP max_each_iterSEXP, SEXP tolSEXP, SEXP nullDevSEXP, SEXP backtrackSEXP, SEXP boundSEXP, SEXP initial_active_groupSEXP, SEXP nvar_maxSEXP, SEXP group_maxSEXP, SEXP trace_lambdaSEXP, SEXP single_interceptSEXP, SEXP threadsSEXP, SEXP actSetSEXP, SEXP actIterSEXP, SEXP activeGroupNumSEXP, SEXP actSetRemoveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type n_prov(n_provSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda_seq(lambda_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type lambda_early_stop(lambda_early_stopSEXP);
    Rcpp::traits::input_parameter< double >::type stop_dev_ratio(stop_dev_ratioSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type group_multiplier(group_multiplierSEXP);
    Rcpp::traits::input_parameter< int >::type max_total_iter(max_total_iterSEXP);
    Rcpp::traits::input_parameter< int >::type max_each_iter(max_each_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type nullDev(nullDevSEXP);
    Rcpp::traits::input_parameter< bool >::type backtrack(backtrackSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< int >::type initial_active_group(initial_active_groupSEXP);
    Rcpp::traits::input_parameter< double >::type nvar_max(nvar_maxSEXP);
    Rcpp::traits::input_parameter< double >::type group_max(group_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type trace_lambda(trace_lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type single_intercept(single_interceptSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type actSet(actSetSEXP);
    Rcpp::traits::input_parameter< int >::type actIter(actIterSEXP);
    Rcpp::traits::input_parameter< int >::type activeGroupNum(activeGroupNumSEXP);
    Rcpp::traits::input_parameter< bool >::type actSetRemove(actSetRemoveSEXP);
    rcpp_result_gen = Rcpp::wrap(grp_lasso(Y, Z, n_prov, gamma, beta, K0, K1, lambda_seq, lambda_early_stop, stop_dev_ratio, group_multiplier, max_total_iter, max_each_iter, tol, nullDev, backtrack, bound, initial_active_group, nvar_max, group_max, trace_lambda, single_intercept, threads, actSet, actIter, activeGroupNum, actSetRemove));
    return rcpp_result_gen;
END_RCPP
}
// pp_DiscSurv_lasso
List pp_DiscSurv_lasso(arma::vec& delta_obs, int max_timepoint, arma::mat& Z, arma::vec& n_prov, arma::vec& time, arma::vec& gamma, arma::vec& beta, arma::vec& alpha, int K0, arma::vec& K1, arma::vec& sum_failure, arma::vec failure_each_center, arma::vec& lambda_seq, arma::vec& penalized_multiplier, int max_total_iter, int max_each_iter, double tol, bool backtrack, bool MM, double bound, int initial_active_var, double nvar_max, bool trace_lambda, int threads, bool actSet, int actIter, int activeVarNum, bool actSetRemove);
RcppExport SEXP _ppLasso_pp_DiscSurv_lasso(SEXP delta_obsSEXP, SEXP max_timepointSEXP, SEXP ZSEXP, SEXP n_provSEXP, SEXP timeSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP K0SEXP, SEXP K1SEXP, SEXP sum_failureSEXP, SEXP failure_each_centerSEXP, SEXP lambda_seqSEXP, SEXP penalized_multiplierSEXP, SEXP max_total_iterSEXP, SEXP max_each_iterSEXP, SEXP tolSEXP, SEXP backtrackSEXP, SEXP MMSEXP, SEXP boundSEXP, SEXP initial_active_varSEXP, SEXP nvar_maxSEXP, SEXP trace_lambdaSEXP, SEXP threadsSEXP, SEXP actSetSEXP, SEXP actIterSEXP, SEXP activeVarNumSEXP, SEXP actSetRemoveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type delta_obs(delta_obsSEXP);
    Rcpp::traits::input_parameter< int >::type max_timepoint(max_timepointSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type n_prov(n_provSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sum_failure(sum_failureSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type failure_each_center(failure_each_centerSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda_seq(lambda_seqSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type penalized_multiplier(penalized_multiplierSEXP);
    Rcpp::traits::input_parameter< int >::type max_total_iter(max_total_iterSEXP);
    Rcpp::traits::input_parameter< int >::type max_each_iter(max_each_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type backtrack(backtrackSEXP);
    Rcpp::traits::input_parameter< bool >::type MM(MMSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< int >::type initial_active_var(initial_active_varSEXP);
    Rcpp::traits::input_parameter< double >::type nvar_max(nvar_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type trace_lambda(trace_lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type actSet(actSetSEXP);
    Rcpp::traits::input_parameter< int >::type actIter(actIterSEXP);
    Rcpp::traits::input_parameter< int >::type activeVarNum(activeVarNumSEXP);
    Rcpp::traits::input_parameter< bool >::type actSetRemove(actSetRemoveSEXP);
    rcpp_result_gen = Rcpp::wrap(pp_DiscSurv_lasso(delta_obs, max_timepoint, Z, n_prov, time, gamma, beta, alpha, K0, K1, sum_failure, failure_each_center, lambda_seq, penalized_multiplier, max_total_iter, max_each_iter, tol, backtrack, MM, bound, initial_active_var, nvar_max, trace_lambda, threads, actSet, actIter, activeVarNum, actSetRemove));
    return rcpp_result_gen;
END_RCPP
}
// SerBIN
List SerBIN(arma::vec& Y, arma::mat& Z, arma::vec& n_prov, arma::vec gamma, arma::vec beta);
RcppExport SEXP _ppLasso_SerBIN(SEXP YSEXP, SEXP ZSEXP, SEXP n_provSEXP, SEXP gammaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type n_prov(n_provSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(SerBIN(Y, Z, n_prov, gamma, beta));
    return rcpp_result_gen;
END_RCPP
}
// NR_residuals
List NR_residuals(arma::vec t, arma::mat X, arma::vec delta_obs, arma::vec alpha, arma::vec beta, double tol, int max_iter);
RcppExport SEXP _ppLasso_NR_residuals(SEXP tSEXP, SEXP XSEXP, SEXP delta_obsSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta_obs(delta_obsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(NR_residuals(t, X, delta_obs, alpha, beta, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ppLasso_Z_max_grLasso", (DL_FUNC) &_ppLasso_Z_max_grLasso, 4},
    {"_ppLasso_Deviance", (DL_FUNC) &_ppLasso_Deviance, 2},
    {"_ppLasso_DiscSurv_residuals", (DL_FUNC) &_ppLasso_DiscSurv_residuals, 5},
    {"_ppLasso_predict_linear_predictor", (DL_FUNC) &_ppLasso_predict_linear_predictor, 6},
    {"_ppLasso_pp_lasso", (DL_FUNC) &_ppLasso_pp_lasso, 27},
    {"_ppLasso_grp_lasso", (DL_FUNC) &_ppLasso_grp_lasso, 27},
    {"_ppLasso_pp_DiscSurv_lasso", (DL_FUNC) &_ppLasso_pp_DiscSurv_lasso, 28},
    {"_ppLasso_SerBIN", (DL_FUNC) &_ppLasso_SerBIN, 5},
    {"_ppLasso_NR_residuals", (DL_FUNC) &_ppLasso_NR_residuals, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_ppLasso(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
